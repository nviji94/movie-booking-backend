model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String?
  googleId  String?   @unique
  createdAt DateTime  @default(now())
  role     String @default("user") 
  bookings  Booking[]
}

model Theater {
  id       Int      @id @default(autoincrement())
  name     String
  location String
  screenings Screening[]
}

model Movie {
  id          Int        @id @default(autoincrement())
  title       String
  durationMin Int
  rating      Int?       @default(0)     
  description String?                        
  cast        String?                       
  director    String?                        
  posterUrl   String?
  genre       String               
  screenings  Screening[]
}


model Screening {
  id        Int       @id @default(autoincrement())
  movie    Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   Int
  theater   Theater   @relation(fields: [theaterId], references: [id])
  theaterId Int
  startTime DateTime
  seats     Seat[]
  bookings  Booking[]
}

model Seat {
  id          Int       @id @default(autoincrement())
  screening    Screening  @relation(fields: [screeningId], references: [id], onDelete: Cascade)
  screeningId Int
  seatNumber  String
  isBooked    Boolean   @default(false)
  booking     Booking? 
}



model Booking {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  screening   Screening  @relation(fields: [screeningId], references: [id], onDelete: Cascade)
  screeningId Int
  seat        Seat      @relation(fields: [seatId], references: [id])
  seatId      Int       @unique
  createdAt   DateTime  @default(now())
}

// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

